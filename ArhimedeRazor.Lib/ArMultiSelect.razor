
@typeparam TItem
<SfMultiSelect TValue="List<TItem>" TItem="TItem" @bind-Value="SelectedItems" Mode="VisualMode.CheckBox" AllowFiltering="true" Placeholder="Selectati angajatii" DataSource="@Datasource">
    <MultiSelectFieldSettings Text="Name"></MultiSelectFieldSettings>
    <MultiSelectEvents TValue="List<TItem>" OnValueSelect="OnValueSelect" ValueRemoved="OnValueRemoved" TItem="TItem"></MultiSelectEvents>
    <MultiSelectTemplates TItem="TItem">
        <ItemTemplate>
            @{
                PropertyInfo col1 = context.GetType().GetProperty(Column1);
                PropertyInfo col2 = context.GetType().GetProperty(Column2);
            }
            <span class='name'>@(col1 != null ? col1.GetValue(context, null) : "")</span><span class='function'>@(col2 !=null ? col2.GetValue(context,null):"")</span>
        </ItemTemplate>
    </MultiSelectTemplates>
</SfMultiSelect>
<SfListView CssClass="listview-group" ShowHeader=true DataSource="@SelectedItems" Height="200px" TValue="TItem">
    <ListViewFieldSettings TValue="TItem" Id="Id" Text="Name"></ListViewFieldSettings>
    <ListViewTemplates TValue="TItem">
        <HeaderTemplate>
            <table>
                <th>Inchiriere</th>
            </table>
        </HeaderTemplate>
        @* <Template>
        @{
        var data = contex;
        // <div @onclick="(e => OnSelect(data))" style="white-space:nowrap;overflow:visible;white-space:nowrap"></div>
        <div class="text-content">
        @data.Name - @data.Lift.Name   @data.StartTime.ToShortDateString()  @(data.Price + data.TransportPrice)
        <span class="e-icons e-delete-icon" @onclick="@(() => { OnInvoiceDeleteClick(data); })"></span>
        </div>
        }
        </Template> *@
    </ListViewTemplates>
</SfListView>
@code {
    /// <summary>
    /// The datasource of the multiselect component
    /// </summary>
    [Parameter] public List<TItem> Datasource { get; set; }
    /// <summary>
    /// The placeholder of the multiselect component
    /// 
    /// Default is <c>string.Empty</c>
    /// </summary>
    [Parameter] public string Placeholder { get; set; } = "";
    /// <summary>
    /// The binded selected items of the multiselect component
    /// </summary>
    [Parameter] public List<TItem> SelectedItems { get; set; }
    /// <summary>
    /// The first column of the item template 
    /// </summary>
    [Parameter] public string Column1{ get; set; }
    /// <summary>
    /// The second column of the item template
    /// </summary>
    [Parameter] public string Column2{ get; set; }
    [Parameter] public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }
    private async Task OnValueSelect(SelectEventArgs<TItem> args)
    {
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
    private async Task OnValueRemoved(RemoveEventArgs<TItem> args)
    {
        await SelectedItemsChanged.InvokeAsync(SelectedItems);        
    }
}
<style>
    .function {
        right: 15px;
        
    }

    .text-content{
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
</style>

